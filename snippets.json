{
  /*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
  "Print to console": {
    "prefix": "log",
    "body": ["console.log('$1');"]
  },
  "Blank dumb component": {
    "prefix": "dumb",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { View } from 'react-native';",
      "$2",
      "import styles from './styles';",
      "$2",
      "const propTypes = {};",
      "$2",
      "const defaultProps = {};",
      "$2",
      "const $1 = ({ someProp }) => {",
      "return (",
      "<View style={styles.container}>",
      "  <View />",
      "</View>",
      ");",
      "}",
      "$2",
      "$1.propTypes = propTypes;",
      "$1.defaultProps = defaultProps;",
      "$2",
      "export default $1;",
      "$2"
    ]
  },
  "Blank functional component": {
    "prefix": "functional",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { View } from 'react-native';",
      "$2",
      "import styles from './styles';",
      "$2",
      "export default class $1 extends React.Component {",
      "constructor(props) {",
      "super(props)",
      "$2",
      "this.state = {};",
      "}",
      "$2",
      "  static propTypes = {};",
      "$2",
      "  static defaultProps = {};",
      "$2",
      "  render() {",
      "    return (",
      "      <View style={styles.container}>",
      "        <View />",
      "      </View>",
      "    );",
      "  }",
      "}",
      "$2"
    ]
  },
  "Blank list component": {
    "prefix": "list",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { View, FlatList } from 'react-native';",
      "$2",
      "import styles from './styles';",
      "$2",
      "export default class $1 extends React.Component {",
      "constructor(props) {",
      "super(props)",
      "$2",
      "this.renderItem = this.renderItem.bind(this)",
      "}",
      "$2",
      "  static propTypes = {",
      "    data: PropTypes.arrayOf(PropTypes.any),",
      "  };",
      "$2",
      "  static defaultProps = {};",
      "$2",
      "  renderItem ({ item, index }) {",
      "return (",
      "    <View>",
      "      <View />",
      "    </View>",
      "  )};",
      "$2",
      "  render() {",
      "    return (",
      "      <FlatList",
      "        keyExtractor={({ id }) => id}",
      "        data={this.props.data}",
      "        renderItem={this.renderItem}",
      "        style={styles.wrapper}",
      "        contentContainerStyle={styles.container}",
      "      />",
      "    );",
      "  }",
      "}",
      "$2"
    ]
  },
  "Blank container component": {
    "prefix": "container",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { View } from 'react-native';",
      "$2",
      "export class $1 extends React.Component {",
      "constructor(props) {",
      "super(props)",
      "$2",
      "this.state = {};",
      "}",
      "$2",
      "  static propTypes = {};",
      "$2",
      "  static defaultProps = {};",
      "$2",
      "  render() {",
      "    return (",
      "      <View>",
      "        <View />",
      "      </View>",
      "    );",
      "  }",
      "}",
      "$2",
      "function mapStateToProps(state) {",
      "  return {};",
      "}",
      "$2",
      "export default connect(mapStateToProps)($1);",
      "$2"
    ]
  },
  "Blank saga": {
    "prefix": "saga",
    "body": [
      "import { call, put } from 'redux-saga/effects';",
      "$4",
      "import { $1 } from '../../../services';",
      "import { app } from '../../../utils';",
      "$4",
      "export default function* $2(action) {",
      "  try {",
      "    const response = yield call($1.$2, $3);",
      "    const nextAction = app.prepareNextAction(action, response);",
      "$4",
      "  if (nextAction) {",
      "      yield put(",
      "        nextAction",
      "      );",
      "    }",
      "  } catch (error) {",
      "$4",
      "    yield put({",
      "      type: 'logError',",
      "      payload: {",
      "        error: app.createError(error),",
      "        date: Date.now()",
      "      }",
      "    });",
      "  }",
      "}",
      "$4"
    ]
  },
  "Blank stylesheet": {
    "prefix": "styles",
    "body": [
      "import { StyleSheet } from 'react-native';",
      "$1",
      "import styleConstants from '../../static/styleConstants';",
      "$1",
      "const styles = StyleSheet.create({});",
      "$1",
      "export default styles;"
    ]
  },
  "Blank component index": {
    "prefix": "index",
    "body": ["import $1 from './$1';", "$2", "export default $1;"]
  },
  "Blank test": {
    "prefix": "test",
    "body": [
      "import React from 'react';",
      "import renderer from 'react-test-renderer';",
      "$2",
      "import $1 from '..';",
      "$2",
      "describe('$1', () => {",
      "const spies = [];",
      "const dispatch = jest.fn();",
      "$2",
      "describe('renders', () => {",
      "it('renders with minimum required props', () => {",
      "const component = renderer.create(<$1 />);",
      "$2",
      "expect(component).toMatchSnapshot();",
      "});",
      "$2",
      "});",
      "$2",
      "describe('methods', () => {",
      "});",
      "$2",
      "describe('lifecycle methods', () => {",
      "});",
      "$2",
      "describe('actions', () => {",
      "});",
      "$2",
      "afterEach(() => {",
      "spies.forEach((spy) => {",
      "if (spy) {",
      "spy.mockClear();",
      "}",
      "});",
      "dispatch.mockClear()",
      "});",
      "});"
    ]
  },
  "Blank functional test": {
    "prefix": "testf",
    "body": [
      "it('renders a $1', () => {",
      "  const component = renderer.create(<$1 />);",
      "  const { root } = component;",
      "  const instance = component.getInstance();",
      "});"
    ]
  },
  "Blank utility test": {
    "prefix": "testu",
    "body": [
      "import $1 from '..';",
      "$5",
      "describe('$1()', () => {",
      "it('should $2', () => {",
      "  expect($1($3)).toBe($4);",
      "})",
      "});"
    ]
  },
  "Blank reducer test": {
    "prefix": "testr",
    "body": [
      "import reducer from '..';",
      "import initialState from '../initialState';",
      "$1",
      "it('should return the initial state', () => {",
      "  expect(reducer(undefined, {})).toEqual(initialState);",
      "});"
    ]
  },
  "Blank service test": {
    "prefix": "testse",
    "body": [
      "import $1 from '..';",
      "$3",
      "jest.mock('$2', () => {",
      "  return {",
      "    $1: jest.fn(() => {",
      "      return new Promise((resolve) => {",
      "        $3",
      "      });",
      "    }),",
      "  };",
      "});",
      "$3",
      "describe('$1', () => {",
      "  it('resolves a promise', async () => {",
      "    expect.assertions(1);",
      "    const response = await $1();",
      "    expect(response).toEqual();",
      "  });",
      "});"
    ]
  },
  "Blank saga test": {
    "prefix": "tests",
    "body": [
      "import { call, put } from 'redux-saga/effects';",
      "import sagaHelper from 'redux-saga-testing';",
      "${4}",
      "import { app } from '../../../../utils';",
      "import $1 from '..';",
      "${4}",
      "const $2 = {",
      "  $1: jest.fn(),",
      "};",
      "${4}",
      "const action = {",
      "  type: '$1',",
      "};",
      "${4}",
      "const nextAction = {",
      "  type: 'SUCCESS',",
      "};",
      "${4}",
      "const actionWithNextAction = { ...action, meta: { ...action.meta, nextAction } };",
      "${4}",
      "const response = { foo: 'bar' };",
      "${4}",
      "describe('When testing the saga without a nextAction and without a response from the api', () => {",
      "  const it = sagaHelper($1(action));",
      "${4}",
      "  it('should have called the mocked API first', (result) => {",
      "    expect(JSON.stringify(result)).toEqual(JSON.stringify(call($2.$1, $3)));",
      "  });",
      "${4}",
      "  // Insert test for default nextAction (if any)",
      "${4}",
      "  it('and then nothing', (result) => {",
      "    expect(result).toBeUndefined();",
      "  });",
      "});",
      "${4}",
      "describe('When testing the saga without a nextAction and with a response from the api', () => {",
      "  const it = sagaHelper($1(action));",
      "${4}",
      "  it('should have called the mocked API first', (result) => {",
      "    expect(JSON.stringify(result)).toEqual(JSON.stringify(call($2.$1, $3)));",
      "${4}",
      " return response;",
      "  });",
      "${4}",
      "  // Insert test for default nextAction (if any)",
      "${4}",
      "  it('and then nothing', (result) => {",
      "    expect(result).toBeUndefined();",
      "  });",
      "});",
      "${4}",
      "describe('When testing the saga with a nextAction and without a response from the api', () => {",
      "  const it = sagaHelper($1(actionWithNextAction));",
      "${4}",
      "  it('should have called the mocked API first', (result) => {",
      "    expect(JSON.stringify(result)).toEqual(JSON.stringify(call($2.$1, $3)));",
      "  });",
      "${4}",
      "  it('and then trigger an action', (result) => {",
      "    expect(result).toEqual(put({ ...nextAction, payload: {} }));",
      "  });",
      "${4}",
      "  it('and then nothing', (result) => {",
      "    expect(result).toBeUndefined();",
      "  });",
      "});",
      "${4}",
      "describe('When testing the saga with a nextAction and with a response from the api', () => {",
      "  const it = sagaHelper($1(actionWithNextAction));",
      "${4}",
      "  it('should have called the mocked API first', (result) => {",
      "    expect(JSON.stringify(result)).toEqual(JSON.stringify(call($2.$1, $3)));",
      "${4}",
      " return response;",
      "  });",
      "${4}",
      "  it('and then trigger an action', (result) => {",
      "    expect(result).toEqual(put({ ...nextAction, payload: response }));",
      "  });",
      "${4}",
      "  it('and then nothing', (result) => {",
      "    expect(result).toBeUndefined();",
      "  });",
      "});",
      "${4}",
      "describe('When testing the saga when an error is thrown from the api', () => {",
      "  const it = sagaHelper($1(action));",
      "  const errorMessage = 'Something went wrong';",
      "${4}",
      "  it('should have called the mocked API first', (result) => {",
      "    expect(JSON.stringify(result)).toEqual(JSON.stringify(call($2.$1, $3)));",
      "${4}",
      "    return new Error(errorMessage);",
      "  });",
      "${4}",
      "  it('and then trigger an error action with the error message', (result) => {",
      "    expect(result).toEqual(",
      "put({",
      "  type: 'logError',",
      "   payload: {",
      "    error: app.createError(errorMessage),",
      "    date: expect.any(Number),",
      "  },",
      "}),",
      "    );",
      "  });",
      "${4}",
      "  it('and then nothing', (result) => {",
      "    expect(result).toBeUndefined();",
      "  });",
      "});"
    ]
  },
  "Blank string literal": {
    "prefix": "str",
    "body": ["`${$1}`"]
  },
  "Blank ref": {
    "prefix": "ref",
    "body": ["ref={(c) => {", "  this.$1 = c;", "}}"]
  }
}
